import java.io.*;
import java.util.*;

public class FileTree {
	
    public static void main(String[] args) {
    	
         System.out.println(listFiles(new File(args[0]), new FileFilter() {   
         public boolean accept(File pathname) { 
                return true;
            }
         }));
    }

    public static ArrayList<File> listFiles(File dir, FileFilter filter) {
         ArrayList<File> files = new ArrayList<File>();
         listFiles(dir, files, filter);
         return files;
    }

    private static void listFiles(File dir, ArrayList<File> filimport java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.*;

public class dir {

	public static void main(String [] args) {
		
     String path = "C:\\Users\\Ridvan\\Downloads";
	 listFilesAndFilesSubDirectories(path);
	 
	}
     
		public static void listFilesAndFilesSubDirectories(String directoryName) {
	    ArrayList<File> names=new ArrayList<File>();
		File directory = new File(directoryName);

		// get all the files from a directory

		File[] fList = directory.listFiles();

		for (File file : fList) {

			if (file.isFile()) {
		 //  System.out.println("File  :" + file.getName());
				 names.add(file);

			} else if (file.isDirectory()) {

				listFilesAndFilesSubDirectories(file.getAbsolutePath());
               
			}

		}
		hash(names);
	}
public static void hash(ArrayList<File> names)
{
	for(int i=0;i<names.size();i++){
		for(int k=0;k<names.size();k++){
			if(i!=k){
				try {
					if(compareFile(names.get(i), names.get(k))==1){
						names.remove(k);
					}
					
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}
	for(File file: names)
	{
		System.out.println(file.getName());
	}

}
public static int compareFile(File f1, File f2)throws Exception 
{


FileReader fR1 = new FileReader(f1);
FileReader fR2 = new FileReader(f2);

BufferedReader reader1 = new BufferedReader(fR1);
BufferedReader reader2 = new BufferedReader(fR2);

String line1 = null;
String line2 = null;
int flag=1;
while ((flag==1) &&((line1 = reader1.readLine()) != null)&&((line2 = reader2.readLine()) != null)) 
{
    if (!line1.equalsIgnoreCase(line2))  
        flag=0;
    else 
        flag=1;   
}
reader1.close();
reader2.close();
return flag;


}
}
		
		


            }
            listFiles(file,files,filter);
        }
    }
}